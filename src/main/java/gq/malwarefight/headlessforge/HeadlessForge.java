package gq.malwarefight.headlessforge;

import net.minecraft.init.Bootstrap;
import net.minecraft.launchwrapper.Launch;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.common.discovery.ASMDataTable;
import net.minecraftforge.fml.common.event.FMLEvent;
import net.minecraftforge.fml.common.event.FMLInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPostInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.apache.logging.log4j.core.config.Configurator;
import org.apache.logging.log4j.core.config.DefaultConfiguration;

import java.io.File;
import java.io.IOException;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Scanner;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.zip.ZipFile;

public class HeadlessForge {
    public static HeadlessForge instance = new HeadlessForge();
	public HashMap<Class<?>, Object> instances = new HashMap<>();
	public String modid;
	public ZipFile mod;
    static String ver = "2.0.4";

	public static void initMC() {
		Configurator.initialize(new DefaultConfiguration());
		Launch.main(new String[0]);
		Bootstrap.register();
	}

	public static boolean shouldStop() {
		return System.getProperty("visualvm.id") != null || System.getProperty("stop.on.err") != null;
	}

	public Object lazyCreateClass(Class<?> parent) {
		if (instances.containsKey(parent)) {
			return instances.get(parent);
		}
		Object instance;
		try {
			instance = parent.newInstance();
		} catch (InstantiationException | IllegalAccessException e) {
			e.printStackTrace();
			return null;
		}
		instances.put(parent, instance);
		return instance;
	}

	public static void loadMod(ZipFile mod) {
		instance.mod = mod;
		try {
			Scanner scan = new Scanner(mod.getInputStream(new JarEntry("mcmod.info")));
			while (scan.hasNextLine()) {
				String line = scan.nextLine();
				line = line.trim();
				if (line.contains("\"modid\"")) {
					instance.modid = line.split("\"")[3];
				}
			}
			scan.close();
		} catch (Exception e) {
			instance.modid = "examplemod";
		}
	}

    public static void main(String[] args) throws IOException {
		if (args.length == 0) {
			System.out.println("HeadlessForge " + ver + " by thefightagainstmalware");
			System.out.println("Usage: java -jar <headlessforge.jar> <mod>");
			System.exit(0);
		}
		initMC();
        // Load a jar file stored in args[0]
        System.out.printf("Version: %s\n", ver);
        System.out.println("Loading jar file...");
        try (URLClassLoader cl = new URLClassLoader(new URL[] { new File(args[0]).toURI().toURL() })) {
			try (JarFile jar = new JarFile(args[0])) {
				loadMod(jar);
				List<JarEntry> jarInfo = Collections.list(jar.entries());
				for (JarEntry entry : jarInfo) {
				    try {
				        if (entry.getName().endsWith(".class")) {
				            // Load the class
				            Class<?> clazz = cl.loadClass(entry.getName().replaceAll("/", ".").replaceAll("\\.class", ""));
				            try {
				                methodlist: for (Method m : clazz.getDeclaredMethods()) {
				                    try {
				                        for (Annotation a : m.getDeclaredAnnotations()) {
				                            if (a.annotationType().equals(Mod.EventHandler.class)) {
				                                if (m.getParameterTypes().length == 1 && FMLEvent.class.isAssignableFrom(m.getParameterTypes()[0])) {
				                                    System.out.println("Found event handler: " + m.getName());
				                                    System.out.println("Invoking...");
				                                    m.setAccessible(true);
				                                    if (m.getParameterTypes()[0].isAssignableFrom(FMLPreInitializationEvent.class)) {
				                                        System.out.println("Preinit handler");
				                                        File f = new File("./tmp");
				                                        //noinspection ResultOfMethodCallIgnored
				                                        f.mkdir();
				                                        m.invoke(instance.lazyCreateClass(clazz), new CustomPreInitEvent(new ASMDataTable(), f));
				                                        continue methodlist;
				                                    } else if (m.getParameterTypes()[0].isAssignableFrom(FMLInitializationEvent.class)) {
				                                        System.out.println("Init handler");
				                                        m.invoke(instance.lazyCreateClass(clazz), new FMLInitializationEvent(new Object[]{new Object[]{}}));
				                                        continue methodlist;
				                                    } else if (m.getParameterTypes()[0].isAssignableFrom(FMLPostInitializationEvent.class)) {
				                                        System.out.println("Postinit handler");
				                                        m.invoke(instance.lazyCreateClass(clazz), new FMLPostInitializationEvent(new Object[]{new Object[]{}}));
				                                        continue methodlist;
				                                    }
													System.out.println("None matched, skipping...");
												}
				                            }
				                        }
				                    } catch (Throwable e) {
				                        System.out.printf("Exception in catch loop 3 while processing class %s, and method %s: %s\n", clazz.getName(), m.getName(), ExceptionUtils.getStackTrace(e));
				                    	if (shouldStop()) {
											System.exit(1);
										}
									}
				                }
				            } catch (Throwable e) {
				                System.out.printf("Exception in catch loop 2 while loading class %s: %s\n", clazz.getName(), ExceptionUtils.getStackTrace(e));
								if (shouldStop()) {
									System.exit(1);
								}
							}
				        }
				    } catch (Throwable e) {
				        // Catch loop 1
				        System.out.printf("Exception in catch loop 1: %s\n", ExceptionUtils.getStackTrace(e));
						if (shouldStop()) {
							System.exit(1);
						}
					}
				}
			}
		}

    }
}